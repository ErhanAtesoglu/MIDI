// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App SDK and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

#include "namespace_defines.h"
#include "midl_defines.h"
MIDI_IDL_IMPORT


import "MidiMessageReceivedEventArgs.idl";
import "IMidiEndpointConnectionSource.idl";


namespace MIDI_MIDL_NAMESPACE
{
    MIDI_API_CONTRACT_v1
    [MIDI_INTERFACE_UUID("198d5ef2-313f-41af-9259-a42997e060f0",1.0)]
    interface IMidiEndpointMessageProcessingPlugin
    {
        Guid Id { get; };            

        String Name{ get; set; };           // Optional Name supplied by the consuming application
        IInspectable Tag{ get; set; };      // Optional Arbitrary data attached by the consuming application

        Boolean IsEnabled{ get; set; };

        // initialize may do things like allocate a shared table which is used to keep metadata
        // that is being listened to. Called when connection is created
        void Initialize(IMidiEndpointConnectionSource endpointConnection);

        // called when connection is opened.
        void OnEndpointConnectionOpened();

        // TODO: API design recommendation is to avoid "out" parameters and instead have a return object

        // called by the endpoint connection when a message is received
        // if the listener is also an event source, it may raise the message received event
        void ProcessIncomingMessage(
            MidiMessageReceivedEventArgs args,
            out Boolean skipFurtherListeners,
            out Boolean skipMainMessageReceivedEvent);

        // called when connection is closed
        void Cleanup();

    }
}