// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

// This is the moral equivalent of a "port" in MIDI 1.0. MIDI 2.0 UMP Endpoints are
// almost always bidirectional. This is the main entity that applications will use
// after creating a session

#include "midl_defines.h"
MIDI_IDL_IMPORT


import "IMidiMessageReceivedEventSource.idl";
import "IMidiEndpointMessageProcessingPlugin.idl";
import "MidiSendMessageResultEnum.idl";
import "IMidiEndpointConnectionSettings.idl";
import "IMidiEndpointConnectionSource.idl";

namespace Windows.Devices.Midi2
{
    [MIDI_API_CONTRACT(1)]
    [default_interface]
    runtimeclass MidiEndpointConnection : Windows.Devices.Midi2.IMidiMessageReceivedEventSource,
                                          IMidiEndpointConnectionSource

    {
        // Get the enumeration device selector for all compatible devices
        static String GetDeviceSelector();

        static Boolean SendMessageSucceeded(MidiSendMessageResult sendResult);
        static Boolean SendMessageFailed(MidiSendMessageResult sendResult);


        // just a map key for this connection.
        // originally this was a string GUID, but that was easily confused with the Endpoint Device Id
        Guid ConnectionId{ get; };

        String EndpointDeviceId{ get; };

        // app-supplied optional tag. Can hold whatever information they may want to show in a list
        IInspectable Tag{ get; set; };

        // true if this endpoint connection is actually connected.
        // here for cases when the app holds on to an instance of this outside of the map
        Boolean IsOpen{ get; };

        // read-only copy of the settings used to create this connection
        IMidiEndpointConnectionSettings Settings{ get; };

        Boolean Open();


        IVectorView<IMidiEndpointMessageProcessingPlugin> MessageProcessingPlugins{ get; };
        void AddMessageProcessingPlugin(IMidiEndpointMessageProcessingPlugin plugin);
        void RemoveMessageProcessingPlugin(Guid id);


        // send the UMP interface used by strongly-typed Midi Message classes in the SDK
        MidiSendMessageResult SendMessagePacket(IMidiUniversalPacket message);

        MidiSendMessageResult SendMessageStruct(MIDI_TIMESTAMP timestamp, ref const MidiMessageStruct message, UInt8 wordCount);

        // Uses projection-specific array conversion operators for sending data. Not all languages support this
        // Also, arrays are often passed by-val in WinRT, so this may involve a lot of data copying, depending
        // upon implementation. For large buffers without copying, use the IMemoryBuffer
        MidiSendMessageResult SendMessageWordArray(MIDI_TIMESTAMP timestamp, ref UInt32[] words, UInt32 startIndex, UInt8 wordCount);

        // sending words is a very fast approach, but does work with copies of the data. For the most common cases,
        // the amount of data being copied is quite small (32 and 64 bit messages being the most common), and smaller
        // than an equivalent pointer.
        MidiSendMessageResult SendMessageWords(MIDI_TIMESTAMP timestamp, UInt32 word0);
        MidiSendMessageResult SendMessageWords(MIDI_TIMESTAMP timestamp, UInt32 word0, UInt32 word1);
        MidiSendMessageResult SendMessageWords(MIDI_TIMESTAMP timestamp, UInt32 word0, UInt32 word1, UInt32 word2);
        MidiSendMessageResult SendMessageWords(MIDI_TIMESTAMP timestamp, UInt32 word0, UInt32 word1, UInt32 word2, UInt32 word3);

        // for sending a section of a pre-existing buffer. Used when a client app is maintaining its own memory       
        MidiSendMessageResult SendMessageBuffer(MIDI_TIMESTAMP timestamp, Windows.Foundation.IMemoryBuffer buffer, UInt32 byteOffset, UInt8 byteCount);

        // These methods will send multiple messages. The words must be ordered correctly
        // so they are in order from word-0 to word-n for each message.
        MidiSendMessageResult SendMultipleMessagesWordList(MIDI_TIMESTAMP timestamp, IVectorView<UInt32> words);
        MidiSendMessageResult SendMultipleMessagesWordArray(MIDI_TIMESTAMP timestamp, ref UInt32[] words);

        // a convenience for sending multiple packets. We can do this because these are self-describing
        MidiSendMessageResult SendMultipleMessagesPacketList(IVectorView<IMidiUniversalPacket> messages);
        //MidiSendMessageResult SendMultipleMessagesPacketArray(ref IMidiUniversalPacket[] messages);

        MidiSendMessageResult SendMultipleMessagesStructList(MIDI_TIMESTAMP timestamp, IVectorView<MidiMessageStruct> messages);
        MidiSendMessageResult SendMultipleMessagesStructArray(MIDI_TIMESTAMP timestamp, ref MidiMessageStruct[] messages);

        MidiSendMessageResult SendMultipleMessagesBuffer(MIDI_TIMESTAMP timestamp, Windows.Foundation.IMemoryBuffer buffer, UInt32 byteOffset, UInt32 byteCount);

}





}