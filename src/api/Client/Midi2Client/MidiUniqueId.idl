// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

#include "midl_defines.h"
MIDI_IDL_IMPORT

// represents a MUID -- a 28 bit random number used for MIDI CI conversations
// and associated with a Function Block
// 
// Spec: (MIDI CI Specification)
// - The value of the MUID shall be in the range 0x00000000 to 0x0FFFFFFF.
// - The values 0x0FFFFF00 to 0x0FFFFFFE are reserved.
// - The value 0x0FFFFFFF is used as a Broadcast MUID(see Section 3.3.3).

namespace Windows.Devices.Midi2
{
    [MIDI_API_CONTRACT(1)]
    runtimeclass MidiUniqueId
    {
        // byte 1 is LSB according to spec
        MidiUniqueId();
        MidiUniqueId(UInt32 combined28BitValue);
        MidiUniqueId(UInt8 sevenBitByte1, UInt8 sevenBitByte2, UInt8 sevenBitByte3, UInt8 sevenBitByte4);

        static String LabelShort{ get; };
        static String LabelFull{ get; };

        static MidiUniqueId CreateBroadcast();
        static MidiUniqueId CreateRandom();

        // TODO: Static method to generate a MUID


        // byte 1 is LSB according to spec
        // these are 7-bit bytes. On Set, the MSB is zeroed.
        UInt8 Byte1{ get; set; };
        UInt8 Byte2{ get; set; };
        UInt8 Byte3{ get; set; };
        UInt8 Byte4{ get; set; };

        UInt32 AsCombined28BitValue{ get; };

        Boolean IsBroadcast{ get; };
        Boolean IsReserved{ get; };

        // TODO: Consider adding a constructor which takes a UInt32 and creates the MUID from it

        // TODO: Consider adding a "CreateNew" or similar static function to generate the random number
    };



}