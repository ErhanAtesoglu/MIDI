// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

#include "midl_defines.h"
MIDI_IDL_IMPORT

import "MidiGroupTerminalBlock.idl";
import "MidiProtocolEnum.idl";
import "MidiEndpointNativeDataFormatEnum.idl";
import "MidiEndpointDevicePurposeEnum.idl";
import "MidiFunctionBlock.idl";

import "MidiEndpointDeviceInformationSortOrderEnum.idl";
import "MidiEndpointDeviceInformationFiltersEnum.idl";

namespace Windows.Devices.Midi2
{
    [MIDI_API_CONTRACT(1)]
    [default_interface]
    runtimeclass MidiEndpointDeviceInformation
    {
        static MidiEndpointDeviceInformation CreateFromId(String id);

        static IVectorView<MidiEndpointDeviceInformation> FindAll();
        static IVectorView<MidiEndpointDeviceInformation> FindAll(MidiEndpointDeviceInformationSortOrder sortOrder);
        static IVectorView<MidiEndpointDeviceInformation> FindAll(MidiEndpointDeviceInformationSortOrder sortOrder, MidiEndpointDeviceInformationFilters endpointFilters);

        static String DiagnosticsLoopbackAEndpointId{ get; };
        static String DiagnosticsLoopbackBEndpointId{ get; };

        static String EndpointInterfaceClass{ get; };

        static IVectorView<String> GetAdditionalPropertiesList();

        static Boolean DeviceMatchesFilter(MidiEndpointDeviceInformation deviceInformation, MidiEndpointDeviceInformationFilters endpointFilters);



        String Id { get; };
        

        Windows.Devices.Enumeration.DeviceInformation GetParentDeviceInformation();
        Windows.Devices.Enumeration.DeviceInformation GetContainerInformation();


        Guid ContainerId{ get; };
        String DeviceInstanceId{ get; };


        // We surface all the names here, but use a hierarchy to decide which Name we show as the Name property

        String Name{ get; };                        // user supplied name, if provided (defaults to device name otherwise)
        String TransportSuppliedName{ get; };       // device/transport supplied name, from pnp



        // from Endpoint info notification / discovery process
        UInt8 SpecificationVersionMajor{ get; };
        UInt8 SpecificationVersionMinor{ get; };
        Windows.Foundation.DateTime EndpointInformationLastUpdateTime{ get; };

        String ProductInstanceId{ get; };           // 
        Windows.Foundation.DateTime ProductInstanceIdLastUpdateTime{ get; };

        String EndpointSuppliedName{ get; };        // name supplied by the in-protocol endpoint information, if available
        Windows.Foundation.DateTime EndpointSuppliedNameLastUpdateTime{ get; };

        Boolean SupportsMidi10Protocol{ get; };
        Boolean SupportsMidi20Protocol{ get; };
        Boolean SupportsReceivingJRTimestamps{ get; };
        Boolean SupportsSendingJRTimestamps{ get; };

        Boolean HasStaticFunctionBlocks{ get; };
        UInt8 FunctionBlockCount{ get; };           // this number is provided by endpoint information

        // function blocks
        IMapView<UInt8, MidiFunctionBlock> FunctionBlocks{ get; };
        Windows.Foundation.DateTime FunctionBlocksLastUpdateTime{ get; };


        // Endpoint configuration / protocol negotiation results

        MidiProtocol ConfiguredProtocol{ get; };    // MIDI 1.0 or MIDI 2.0 for this endpoint
        Boolean ConfiguredToReceiveJRTimestamps{ get; };
        Boolean ConfiguredToSendJRTimestamps{ get; };

        Windows.Foundation.DateTime EndpointConfigurationLastUpdateTime{ get; };

        // MIDI Device Identity (sysex stuff)
        UInt8[] DeviceIdentitySystemExclusiveId{ get; };
        UInt8 DeviceIdentityDeviceFamilyLsb{ get; };
        UInt8 DeviceIdentityDeviceFamilyMsb{ get; };
        UInt8 DeviceIdentityDeviceFamilyModelNumberLsb{ get; };
        UInt8 DeviceIdentityDeviceFamilyModelNumberMsb{ get; };
        UInt8[] DeviceIdentitySoftwareRevisionLevel{ get; };

        Windows.Foundation.DateTime DeviceIdentityLastUpdateTime{ get; };


        // transport type
        Guid TransportId{ get; };
        String TransportMnemonic{ get; };

        // iSerialNumber from USB. This is transport-specific, but super important
        String TransportSuppliedSerialNumber{ get; };

        // VID iVendor
        UInt16 TransportSuppliedVendorId{ get; };

        // PID iProduct
        UInt16 TransportSuppliedProductId{ get; };

        // endpoint description supplied by the transport. This may contain most anything that is useful to the user.
        String TransportSuppliedDescription{ get; };

        // manufacturer when we can get that. Typically from USB
        String ManufacturerName{ get; };

        // whether or not this supports multi-client use
        Boolean SupportsMultiClient{ get; };


        // whether or not this is an upgrade MIDI 1.0 device
        MidiEndpointNativeDataFormat NativeDataFormat{ get; };

        // group terminal blocks
        IVectorView<MidiGroupTerminalBlock> GroupTerminalBlocks{ get; };

        // If this is a diagnostic endpoint
        MidiEndpointDevicePurpose EndpointPurpose{ get; };






        // The settings app allows the user to add some metadata, like a description
        String UserSuppliedName{ get; };            // name supplied by the user, if available
        String UserSuppliedDescription{ get; };

        // png icon supplied by the user
        String UserSuppliedLargeImagePath{ get; };
        String UserSuppliedSmallImagePath{ get; };

        Boolean RequiresNoteOffTranslation{ get; };
        UInt16 RecommendedCCAutomationIntervalMS{ get; };
        //Boolean SupportsMidiPolyphonicExpression{ get; }; // removed because the MPE profile is a better way to do this


        Windows.Foundation.Collections.IMapView<String, IInspectable> Properties{ get; };
        

        Boolean UpdateFromDeviceInformation(Windows.Devices.Enumeration.DeviceInformation deviceInformation);
        Boolean UpdateFromDeviceInformationUpdate(Windows.Devices.Enumeration.DeviceInformationUpdate deviceInformationUpdate);
    }
}