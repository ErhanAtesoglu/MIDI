// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

#include "namespace_defines.h"
#include "midl_defines.h"
MIDI_IDL_IMPORT

import "MidiServiceTransportPluginInfo.idl";
import "MidiServiceMessageProcessingPluginInfo.idl";
import "MidiServicePingResponseSummary.idl";

import "MidiServiceSessionInfo.idl";

import "MidiServiceLoopbackEndpointCreationResult.idl";
import "MidiServiceLoopbackEndpointDefinition.idl";

import "IMidiServiceTransportPluginConfiguration.idl";
import "IMidiServiceMessageProcessingPluginConfiguration.idl";
import "MidiServiceConfigurationResponse.idl";

namespace MIDI_MIDL_NAMESPACE
{
    MIDI_API_CONTRACT_v1
    [default_interface]
    static runtimeclass MidiService
    {
        static MidiServicePingResponseSummary PingService(UInt8 pingCount);
        static MidiServicePingResponseSummary PingService(UInt8 pingCount, UInt32 timeoutMilliseconds);

        // list all the installed transports like Virtual, USB, BLE1, etc
        static IVector<MidiServiceTransportPluginInfo> GetInstalledTransportPlugins();
        static IVector<MidiServiceMessageProcessingPluginInfo> GetInstalledMessageProcessingPlugins();


        // for the first release, this will always return false. But developers want to be able
        // to code with this in mind in the future, without changing code/logic

  //      static Boolean IsMessageSchedulingEnabled{ get; };

//        static UInt32 GetOutgoingMessageQueueMaxMessageCapacity();


        static IVector<MidiServiceSessionInfo> GetActiveSessions();


        // creates loopback endpoints that live for only as long as the service is running.
        // Permanent endpoints need to be created by the user through the settings application
        // so they get written to the configuration file and loaded when the service is loaded
        // We special-case loopbacks here just like we special-case Virtual Devices in the 
        // session class, because they are very common to use and have special creation semantics.
        static MidiServiceLoopbackEndpointCreationResult CreateTemporaryLoopbackEndpoints(
            Guid associationId, 
            MidiServiceLoopbackEndpointDefinition endpointDefinitionA, 
            MidiServiceLoopbackEndpointDefinition endpointDefinitionB);

        static Boolean RemoveTemporaryLoopbackEndpoints(Guid associationId);

        // used for CRUD operations for certain endpoints (Transports). Create a component which calls this and
        // provides strongly typed parameters specific to your transport. In general, applications should not be
        // using this function directly. Instead, they should use a configuration component associated with the plugin.
        static MidiServiceConfigurationResponse UpdateTransportPluginConfiguration(
            IMidiServiceTransportPluginConfiguration configurationUpdate);


        // used for CRUD operations for certain endpoint message processing plugins (Transforms). Create a component which calls this and
        // provides strongly typed parameters specific to your transport In general, applications should not be
        // using this function directly. Instead, they should use a configuration component associated with the plugin.
        static MidiServiceConfigurationResponse UpdateProcessingPluginConfiguration(
            IMidiServiceMessageProcessingPluginConfiguration configurationUpdate);


        //static String CurrentSetupFullPath{ get; };
        //static String CurrentSetupFileName{ get; };


    }
}

