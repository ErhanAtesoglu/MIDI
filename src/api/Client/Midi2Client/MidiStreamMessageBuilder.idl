// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

#include "midl_defines.h"
MIDI_IDL_IMPORT


import "IMidiUniversalPacket.idl";
import "MidiMessage128.idl";

import "MidiFunctionBlockUIHintEnum.idl";
import "MidiFunctionBlockMidi10Enum.idl";
import "MidiFunctionBlockDirectionEnum.idl";
import "MidiEndpointDiscoveryFilterFlagsEnum.idl";
import "MidiFunctionBlockDiscoveryFilterFlagsEnum.idl";

namespace Windows.Devices.Midi2
{
    [MIDI_API_CONTRACT(1)]
    static runtimeclass MidiStreamMessageBuilder
    {
        static IMidiUniversalPacket BuildEndpointDiscoveryMessage(
            MIDI_TIMESTAMP timestamp,
            UInt8 umpVersionMajor,
            UInt8 umpVersionMinor,
            MidiEndpointDiscoveryFilterFlags requestFlags
            );

        static IMidiUniversalPacket BuildEndpointInformationNotificationMessage(
            MIDI_TIMESTAMP timestamp,
            UInt8 umpVersionMajor,
            UInt8 umpVersionMinor,
            Boolean hasStaticFunctionBlocks,
            UInt8 numberOfFunctionBlocks,
            Boolean supportsMidi20Protocol,
            Boolean supportsMidi10Protocol,
            Boolean supportsReceivingJitterReductionTimestamps,
            Boolean supportsSendingJitterReductionTimestamps
            );

        static IMidiUniversalPacket BuildDeviceIdentityNotificationMessage(
            MIDI_TIMESTAMP timestamp,
            UInt8 deviceManufacturerSysExIdByte1,
            UInt8 deviceManufacturerSysExIdByte2,
            UInt8 deviceManufacturerSysExIdByte3,
            UInt8 deviceFamilyLsb,
            UInt8 deviceFamilyMsb,
            UInt8 deviceFamilyModelNumberLsb,
            UInt8 deviceFamilyModelNumberMsb,
            UInt8 softwareRevisionLevelByte1,
            UInt8 softwareRevisionLevelByte2,
            UInt8 softwareRevisionLevelByte3,
            UInt8 softwareRevisionLevelByte4
            );

        static IVector<IMidiUniversalPacket> BuildEndpointNameNotificationMessages(
            MIDI_TIMESTAMP timestamp,
            String name
            );

        static IVector<IMidiUniversalPacket> BuildProductInstanceIdNotificationMessages(
            MIDI_TIMESTAMP timestamp,
            String productInstanceId
            );



        static String ParseEndpointNameNotificationMessages(
            IVector<IMidiUniversalPacket> messages
        );

        static String ParseProductInstanceIdNotificationMessages(
            IVector<IMidiUniversalPacket> messages
        );




        static IMidiUniversalPacket BuildStreamConfigurationRequestMessage(
            MIDI_TIMESTAMP timestamp,
            UInt8 protocol,
            Boolean expectToReceiveJRTimestamps,
            Boolean requestToSendJRTimestamps
            );

        static IMidiUniversalPacket BuildStreamConfigurationNotificationMessage(
            MIDI_TIMESTAMP timestamp,
            UInt8 protocol,
            Boolean confirmationWillReceiveJRTimestamps,
            Boolean confirmationSendJRTimestamps
            );


        // Function blocks

        static IMidiUniversalPacket BuildFunctionBlockDiscoveryMessage(
            MIDI_TIMESTAMP timestamp,
            UInt8 functionBlockNumber,
            MidiFunctionBlockDiscoveryFilterFlags requestFlags
            );

        static IMidiUniversalPacket BuildFunctionBlockInfoNotificationMessage(
            MIDI_TIMESTAMP timestamp,
            Boolean active,
            UInt8 functionBlockNumber,
            MidiFunctionBlockUIHint uiHint,
            MidiFunctionBlockMidi10 midi10,
            MidiFunctionBlockDirection direction,
            UInt8 firstGroup,
            UInt8 numberOfGroups,
            UInt8 midiCIVersionFormat,
            UInt8 maxNumberSysEx8Streams
            );

        static IVector<IMidiUniversalPacket> BuildFunctionBlockNameNotificationMessages(
            MIDI_TIMESTAMP timestamp,
            UInt8 functionBlockNumber,
            String name
            );

        static String ParseFunctionBlockNameNotificationMessages(
            IVector<IMidiUniversalPacket> messages
            );

    };
}