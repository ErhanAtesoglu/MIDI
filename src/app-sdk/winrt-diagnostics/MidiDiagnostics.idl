// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

#include "namespace_defines.h"
#include "midl_defines.h"

MIDI_IDL_IMPORT

import "MidiGroupTerminalBlock.idl";
import "MidiProtocolEnum.idl";
import "MidiEndpointNativeDataFormatEnum.idl";
import "MidiEndpointDevicePurposeEnum.idl";
import "MidiFunctionBlock.idl";
import "MidiDeclaredDeviceIdentity.idl";
import "MidiDeclaredEndpointInfo.idl";
import "MidiEndpointTransportSuppliedInfo.idl";
import "MidiEndpointUserSuppliedInfo.idl";

import "MidiEndpointDeviceInformationSortOrderEnum.idl";
import "MidiEndpointDeviceInformationFiltersEnum.idl";

namespace MIDI_MIDL_NAMESPACE
{
    MIDI_API_CONTRACT_v1
    [default_interface]
    runtimeclass MidiDiagnostics
    {
        // these would be more robust if they did an enumeration lookup on the loopback/ping properties
        //static winrt::hstring DiagnosticsLoopbackAEndpointDeviceId() noexcept { return internal::NormalizeEndpointInterfaceIdHStringCopy(MIDI_DIAGNOSTICS_LOOPBACK_BIDI_ID_A).c_str(); }
        //static winrt::hstring DiagnosticsLoopbackBEndpointDeviceId() noexcept { return internal::NormalizeEndpointInterfaceIdHStringCopy(MIDI_DIAGNOSTICS_LOOPBACK_BIDI_ID_B).c_str(); }
        //static winrt::hstring DiagnosticsInternalPingEndpointDeviceId() noexcept { return internal::NormalizeEndpointInterfaceIdHStringCopy(MIDI_DIAGNOSTICS_PING_BIDI_ID).c_str(); }


        static String DiagnosticsLoopbackAEndpointDeviceId{ get; };
        static String DiagnosticsLoopbackBEndpointDeviceId{ get; };

    }
}









